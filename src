import java.util.ArrayList;
import java.util.List;

// Shared ticket booking system
class TicketBookingSystem {
    private List<Integer> availableSeats;

    public TicketBookingSystem(int totalSeats) {
        availableSeats = new ArrayList<>();
        for (int i = 1; i <= totalSeats; i++) {
            availableSeats.add(i);
        }
    }

    // Synchronized method to prevent race conditions
    public synchronized boolean bookTicket(String userName) {
        if (!availableSeats.isEmpty()) {
            int seat = availableSeats.remove(0);
            System.out.println(userName + " booked seat number: " + seat);
            return true;
        } else {
            System.out.println(userName + " failed to book: No seats available.");
            return false;
        }
    }
}

// Base class for user
class User {
    protected String userName;

    public User(String userName) {
        this.userName = userName;
    }

    public void displayUser() {
        System.out.println("Booking attempted by: " + userName);
    }
}

// Thread class extends User and handles booking
class UserThread extends User implements Runnable {
    private TicketBookingSystem bookingSystem;

    public UserThread(TicketBookingSystem bookingSystem, String userName) {
        super(userName);
        this.bookingSystem = bookingSystem;
    }

    @Override
    public void run() {
        displayUser();  // from User class
        bookingSystem.bookTicket(userName);
    }
}

// Main class with main() method
public class MultithreadedTicketBooking {
    public static void main(String[] args) {
        TicketBookingSystem bookingSystem = new TicketBookingSystem(5); // 5 seats

        // Create user threads
        Thread t1 = new Thread(new UserThread(bookingSystem, "User1"));
        Thread t2 = new Thread(new UserThread(bookingSystem, "User2"));
        Thread t3 = new Thread(new UserThread(bookingSystem, "User3"));
        Thread t4 = new Thread(new UserThread(bookingSystem, "User4"));
        Thread t5 = new Thread(new UserThread(bookingSystem, "User5"));
        Thread t6 = new Thread(new UserThread(bookingSystem, "User6"));

        // Start booking threads
        t1.start();
        t2.start();
        t3.start();
        t4.start();
        t5.start();
        t6.start();
    }
}
